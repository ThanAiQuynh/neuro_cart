"""init database

Revision ID: a6f9ca9baec0
Revises: 
Create Date: 2025-09-13 14:25:58.073120

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector

# revision identifiers, used by Alembic.
revision: str = 'a6f9ca9baec0'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # enable citext & vector extension
    op.execute("CREATE EXTENSION IF NOT EXISTS citext")
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto")
    op.execute("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"")
    op.execute("CREATE EXTENSION IF NOT EXISTS vector")

    # create schemas
    op.execute("CREATE SCHEMA IF NOT EXISTS core")
    op.execute("CREATE SCHEMA IF NOT EXISTS ops")
    op.execute("CREATE SCHEMA IF NOT EXISTS rag")
    op.execute("CREATE SCHEMA IF NOT EXISTS chat")
    op.execute("CREATE SCHEMA IF NOT EXISTS mcp")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('brands',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_brands')),
    schema='core'
    )
    op.create_index('ux_brands_slug_live', 'brands', ['slug'], unique=True, schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('categories',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('parent_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['core.categories.id'], name=op.f('fk_categories_parent_id_categories'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_categories')),
    schema='core'
    )
    op.create_index('ux_categories_slug_live', 'categories', ['slug'], unique=True, schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('coupons',
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('value', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('max_uses', sa.Integer(), nullable=True),
    sa.Column('used_count', sa.Integer(), nullable=False),
    sa.Column('starts_at', sa.String(), nullable=True),
    sa.Column('ends_at', sa.String(), nullable=True),
    sa.Column('conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_coupons')),
    sa.UniqueConstraint('code', name=op.f('uq_coupons_code')),
    schema='core'
    )
    op.create_table('inventory_locations',
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_inventory_locations')),
    sa.UniqueConstraint('code', name=op.f('uq_inventory_locations_code')),
    schema='core'
    )
    op.create_table('media_assets',
    sa.Column('owner_type', sa.String(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.Column('alt', sa.String(), nullable=True),
    sa.Column('sort_order', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_media_assets')),
    schema='core'
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_roles')),
    sa.UniqueConstraint('code', name=op.f('uq_roles_code')),
    schema='core'
    )
    op.create_table('users',
    sa.Column('email', postgresql.CITEXT(), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('email_verified_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('password_changed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('failed_login_count', sa.Integer(), nullable=False),
    sa.Column('lock_until', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_login_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('mfa_enabled', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users')),
    sa.UniqueConstraint('email', name=op.f('uq_users_email')),
    schema='core'
    )
    op.create_table('tool_providers',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('endpoint', sa.String(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tool_providers')),
    schema='mcp'
    )
    op.create_table('event_outbox',
    sa.Column('aggregate', sa.String(), nullable=False),
    sa.Column('aggregate_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('payload', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('published', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_event_outbox')),
    schema='ops'
    )
    op.create_table('login_attempts',
    sa.Column('email_canon', postgresql.CITEXT(), nullable=False),
    sa.Column('ip', postgresql.INET(), nullable=False),
    sa.Column('attempted_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_login_attempts')),
    schema='ops'
    )
    op.create_index('ix_login_attempts_email_time', 'login_attempts', ['email_canon', 'attempted_at'], unique=False, schema='ops')
    op.create_index('ix_login_attempts_ip_time', 'login_attempts', ['ip', 'attempted_at'], unique=False, schema='ops')
    op.create_table('citations',
    sa.Column('retrieval_id', sa.UUID(), nullable=False),
    sa.Column('chunk_id', sa.UUID(), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=False),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_citations')),
    schema='rag'
    )
    op.create_table('knowledge_sources',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('kind', sa.String(), nullable=False),
    sa.Column('url', sa.String(), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_knowledge_sources')),
    schema='rag'
    )
    op.create_table('chat_sessions',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('channel', sa.String(), nullable=False),
    sa.Column('persona', sa.String(), nullable=True),
    sa.Column('last_active_at', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_chat_sessions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_chat_sessions')),
    schema='chat'
    )
    op.create_table('api_keys',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('key_prefix', sa.Text(), nullable=False),
    sa.Column('key_hash', sa.Text(), nullable=False),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'[]'::jsonb"), nullable=False),
    sa.Column('last_used_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_api_keys_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_keys')),
    sa.UniqueConstraint('key_prefix', name='uq_api_keys_key_prefix'),
    schema='core'
    )
    op.create_index('ix_api_keys_scopes_gin', 'api_keys', ['scopes'], unique=False, schema='core', postgresql_using='gin')
    op.create_table('customers',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('tier', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_customers_user_id_users'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_customers')),
    sa.UniqueConstraint('user_id', name=op.f('uq_customers_user_id')),
    schema='core'
    )
    op.create_table('mfa_totp',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('secret_encrypted', postgresql.BYTEA(), nullable=False),
    sa.Column('recovery_codes_hash', postgresql.ARRAY(sa.TEXT()), nullable=False),
    sa.Column('disabled_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_mfa_totp_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_mfa_totp')),
    schema='core'
    )
    op.create_table('oauth_accounts',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('provider', sa.Text(), nullable=False),
    sa.Column('provider_user_id', sa.Text(), nullable=False),
    sa.Column('access_token_encrypted', postgresql.BYTEA(), nullable=True),
    sa.Column('refresh_token_encrypted', postgresql.BYTEA(), nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_oauth_accounts_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_oauth_accounts')),
    sa.UniqueConstraint('provider', 'provider_user_id', name='uq_oauth_provider_user'),
    schema='core'
    )
    op.create_table('password_resets',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.Text(), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_password_resets_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_password_resets')),
    schema='core'
    )
    op.create_index('uq_password_resets_user_active', 'password_resets', ['user_id'], unique=True, schema='core', postgresql_where=sa.text('used_at IS NULL'))
    op.create_table('products',
    sa.Column('brand_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('slug', sa.String(), nullable=False),
    sa.Column('model_number', sa.String(), nullable=True),
    sa.Column('specs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('is_published', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['brand_id'], ['core.brands.id'], name=op.f('fk_products_brand_id_brands'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_products')),
    schema='core'
    )
    op.create_index('ux_products_slug_live', 'products', ['slug'], unique=True, schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['core.roles.id'], name=op.f('fk_user_roles_role_id_roles'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_user_roles_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_user_roles')),
    sa.UniqueConstraint('user_id', 'role_id', name='uq_user_roles_user_role'),
    schema='core'
    )
    op.create_table('audit_logs',
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('event', sa.Text(), nullable=False),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_audit_logs_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_audit_logs')),
    schema='ops'
    )
    op.create_index('ix_audit_logs_created_at', 'audit_logs', ['created_at'], unique=False, schema='ops')
    op.create_index('ix_audit_logs_meta_gin', 'audit_logs', ['meta'], unique=False, schema='ops', postgresql_using='gin')
    op.create_table('auth_sessions',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('last_seen_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('ip', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('revoked_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_auth_sessions_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_auth_sessions')),
    schema='ops'
    )
    op.create_index('ix_auth_sessions_userid_lastseen', 'auth_sessions', ['user_id', 'last_seen_at'], unique=False, schema='ops')
    op.create_index('live_sessions_partial', 'auth_sessions', ['user_id'], unique=False, schema='ops', postgresql_where=sa.text('revoked_at IS NULL'))
    op.create_table('agent_runs',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('objective', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('started_at', sa.String(), nullable=True),
    sa.Column('finished_at', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['chat.chat_sessions.id'], name=op.f('fk_agent_runs_session_id_chat_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_agent_runs')),
    schema='chat'
    )
    op.create_table('chat_messages',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('tokens_in', sa.Integer(), nullable=True),
    sa.Column('tokens_out', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['chat.chat_sessions.id'], name=op.f('fk_chat_messages_session_id_chat_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_chat_messages')),
    schema='chat'
    )
    op.create_table('addresses',
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('recipient', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('line1', sa.String(), nullable=False),
    sa.Column('line2', sa.String(), nullable=True),
    sa.Column('city', sa.String(), nullable=True),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('postal_code', sa.String(), nullable=True),
    sa.Column('country_code', sa.String(length=2), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['core.customers.id'], name=op.f('fk_addresses_customer_id_customers'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_addresses')),
    schema='core'
    )
    op.create_table('carts',
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['core.customers.id'], name=op.f('fk_carts_customer_id_customers'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_carts')),
    schema='core'
    )
    op.create_table('product_categories',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['category_id'], ['core.categories.id'], name=op.f('fk_product_categories_category_id_categories'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['core.products.id'], name=op.f('fk_product_categories_product_id_products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('product_id', 'category_id', name=op.f('pk_product_categories')),
    sa.UniqueConstraint('product_id', 'category_id', name='uq_product_categories_product_category'),
    schema='core'
    )
    op.create_table('product_variants',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('sku', sa.String(), nullable=False),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('barcode', sa.String(), nullable=True),
    sa.Column('weight_grams', sa.Integer(), nullable=True),
    sa.Column('dimensions_mm', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['core.products.id'], name=op.f('fk_product_variants_product_id_products'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_product_variants')),
    schema='core'
    )
    op.create_index('ux_variants_sku_live', 'product_variants', ['sku'], unique=True, schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('refresh_tokens',
    sa.Column('session_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('family_id', sa.UUID(), nullable=False),
    sa.Column('jti', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.String(), nullable=False),
    sa.Column('issued_at', sa.DateTime(), nullable=False),
    sa.Column('expires_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('revoked_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('replaced_by', sa.UUID(), nullable=True),
    sa.Column('ip', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['ops.auth_sessions.id'], name=op.f('fk_refresh_tokens_session_id_auth_sessions')),
    sa.ForeignKeyConstraint(['user_id'], ['core.users.id'], name=op.f('fk_refresh_tokens_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_refresh_tokens')),
    sa.UniqueConstraint('jti', name='uq_tokens_jti'),
    schema='ops'
    )
    op.create_index('ix_tokens_userid_expires', 'refresh_tokens', ['user_id', 'expires_at'], unique=False, schema='ops')
    op.create_index('uq_tokens_family_active', 'refresh_tokens', ['family_id'], unique=True, schema='ops', postgresql_where=sa.text('revoked_at IS NULL'))
    op.create_table('retrieval_logs',
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('top_k', sa.Integer(), nullable=False),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['chat.chat_sessions.id'], name=op.f('fk_retrieval_logs_session_id_chat_sessions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_retrieval_logs')),
    schema='rag'
    )
    op.create_table('cart_items',
    sa.Column('cart_id', sa.UUID(), nullable=False),
    sa.Column('variant_id', sa.UUID(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.CheckConstraint('qty > 0', name=op.f('ck_cart_items_ck_cart_items_qty_pos')),
    sa.ForeignKeyConstraint(['cart_id'], ['core.carts.id'], name=op.f('fk_cart_items_cart_id_carts'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_cart_items_variant_id_product_variants'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('cart_id', 'variant_id', name=op.f('pk_cart_items')),
    sa.UniqueConstraint('cart_id', 'variant_id', name='uq_cart_items_cart_variant'),
    schema='core'
    )
    op.create_table('inventory_levels',
    sa.Column('variant_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('on_hand', sa.Integer(), nullable=False),
    sa.Column('reserved', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['core.inventory_locations.id'], name=op.f('fk_inventory_levels_location_id_inventory_locations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_inventory_levels_variant_id_product_variants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('variant_id', 'location_id', name=op.f('pk_inventory_levels')),
    sa.UniqueConstraint('variant_id', 'location_id', name='uq_inventory_levels_variant_location'),
    schema='core'
    )
    op.create_table('orders',
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('billing_addr_id', sa.UUID(), nullable=True),
    sa.Column('shipping_addr_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('subtotal', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('discount_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('tax_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('shipping_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('grand_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['billing_addr_id'], ['core.addresses.id'], name=op.f('fk_orders_billing_addr_id_addresses')),
    sa.ForeignKeyConstraint(['customer_id'], ['core.customers.id'], name=op.f('fk_orders_customer_id_customers'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['shipping_addr_id'], ['core.addresses.id'], name=op.f('fk_orders_shipping_addr_id_addresses')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_orders')),
    sa.UniqueConstraint('code', name=op.f('uq_orders_code')),
    schema='core'
    )
    op.create_table('prices',
    sa.Column('variant_id', sa.UUID(), nullable=False),
    sa.Column('currency', sa.String(length=3), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('compare_at', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('effective_at', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_prices_variant_id_product_variants'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_prices')),
    schema='core'
    )
    op.create_table('reviews',
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.Column('rating', sa.SmallInteger(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('body', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['core.customers.id'], name=op.f('fk_reviews_customer_id_customers'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['product_id'], ['core.products.id'], name=op.f('fk_reviews_product_id_products'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_reviews_variant_id_product_variants'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_reviews')),
    schema='core'
    )
    op.create_table('tool_calls',
    sa.Column('run_id', sa.UUID(), nullable=False),
    sa.Column('provider_id', sa.UUID(), nullable=True),
    sa.Column('tool_name', sa.String(), nullable=False),
    sa.Column('arguments', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['mcp.tool_providers.id'], name=op.f('fk_tool_calls_provider_id_tool_providers')),
    sa.ForeignKeyConstraint(['run_id'], ['chat.agent_runs.id'], name=op.f('fk_tool_calls_run_id_agent_runs')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_tool_calls')),
    schema='mcp'
    )
    op.create_table('documents',
    sa.Column('source_id', sa.UUID(), nullable=True),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('lang', sa.String(), nullable=False),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('latest_version_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['product_id'], ['core.products.id'], name=op.f('fk_documents_product_id_products')),
    sa.ForeignKeyConstraint(['source_id'], ['rag.knowledge_sources.id'], name=op.f('fk_documents_source_id_knowledge_sources')),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_documents_variant_id_product_variants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_documents')),
    schema='rag'
    )
    op.create_table('order_items',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=True),
    sa.Column('variant_id', sa.UUID(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('sku', sa.String(), nullable=False),
    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('unit_price', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('line_total', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['core.orders.id'], name=op.f('fk_order_items_order_id_orders'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['product_id'], ['core.products.id'], name=op.f('fk_order_items_product_id_products'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['variant_id'], ['core.product_variants.id'], name=op.f('fk_order_items_variant_id_product_variants'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_order_items')),
    schema='core'
    )
    op.create_table('payments',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('provider', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('amount', sa.Numeric(precision=12, scale=2), nullable=False),
    sa.Column('txn_ref', sa.String(), nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['core.orders.id'], name=op.f('fk_payments_order_id_orders'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_payments')),
    schema='core'
    )
    op.create_table('returns',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('reason', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['core.orders.id'], name=op.f('fk_returns_order_id_orders'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_returns')),
    schema='core'
    )
    op.create_table('shipments',
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('carrier', sa.String(), nullable=True),
    sa.Column('tracking_no', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('shipped_at', sa.String(), nullable=True),
    sa.Column('delivered_at', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['core.orders.id'], name=op.f('fk_shipments_order_id_orders'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_shipments')),
    schema='core'
    )
    op.create_table('document_versions',
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('raw_text', sa.Text(), nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['rag.documents.id'], name=op.f('fk_document_versions_document_id_documents')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_document_versions')),
    schema='rag'
    )
    op.create_table('return_items',
    sa.Column('return_id', sa.UUID(), nullable=False),
    sa.Column('order_item_id', sa.UUID(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('condition', sa.String(), nullable=True),
    sa.CheckConstraint('qty > 0', name=op.f('ck_return_items_ck_return_items_qty_pos')),
    sa.ForeignKeyConstraint(['order_item_id'], ['core.order_items.id'], name=op.f('fk_return_items_order_item_id_order_items'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['return_id'], ['core.returns.id'], name=op.f('fk_return_items_return_id_returns'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('return_id', 'order_item_id', name=op.f('pk_return_items')),
    sa.UniqueConstraint('return_id', 'order_item_id', name='uq_return_items_return_item'),
    schema='core'
    )
    op.create_table('shipment_items',
    sa.Column('shipment_id', sa.UUID(), nullable=False),
    sa.Column('order_item_id', sa.UUID(), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['order_item_id'], ['core.order_items.id'], name=op.f('fk_shipment_items_order_item_id_order_items'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shipment_id'], ['core.shipments.id'], name=op.f('fk_shipment_items_shipment_id_shipments'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('shipment_id', 'order_item_id', name=op.f('pk_shipment_items')),
    sa.UniqueConstraint('shipment_id', 'order_item_id', name='uq_shipment_items_shipment_item'),
    schema='core'
    )
    op.create_table('document_chunks',
    sa.Column('document_id', sa.UUID(), nullable=False),
    sa.Column('version_id', sa.UUID(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('tokens', sa.Integer(), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted_by', sa.UUID(), nullable=True),
    sa.Column('delete_reason', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['rag.documents.id'], name=op.f('fk_document_chunks_document_id_documents')),
    sa.ForeignKeyConstraint(['version_id'], ['rag.document_versions.id'], name=op.f('fk_document_chunks_version_id_document_versions')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_document_chunks')),
    schema='rag'
    )
    op.create_index('ix_rag_document_chunks_embedding_live', 'document_chunks', ['embedding'], unique=False, schema='rag', postgresql_using='ivfflat', postgresql_with={'lists': '100'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.create_table('message_citations',
    sa.Column('message_id', sa.UUID(), nullable=False),
    sa.Column('chunk_id', sa.UUID(), nullable=False),
    sa.Column('snippet', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['chunk_id'], ['rag.document_chunks.id'], name=op.f('fk_message_citations_chunk_id_document_chunks')),
    sa.ForeignKeyConstraint(['message_id'], ['chat.chat_messages.id'], name=op.f('fk_message_citations_message_id_chat_messages')),
    sa.PrimaryKeyConstraint('message_id', 'chunk_id', name=op.f('pk_message_citations')),
    sa.UniqueConstraint('message_id', 'chunk_id', name='uq_message_citations_message_chunk'),
    schema='chat'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('message_citations', schema='chat')
    op.drop_index('ix_rag_document_chunks_embedding_live', table_name='document_chunks', schema='rag', postgresql_using='ivfflat', postgresql_with={'lists': '100'}, postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('document_chunks', schema='rag')
    op.drop_table('shipment_items', schema='core')
    op.drop_table('return_items', schema='core')
    op.drop_table('document_versions', schema='rag')
    op.drop_table('shipments', schema='core')
    op.drop_table('returns', schema='core')
    op.drop_table('payments', schema='core')
    op.drop_table('order_items', schema='core')
    op.drop_table('documents', schema='rag')
    op.drop_table('tool_calls', schema='mcp')
    op.drop_table('reviews', schema='core')
    op.drop_table('prices', schema='core')
    op.drop_table('orders', schema='core')
    op.drop_table('inventory_levels', schema='core')
    op.drop_table('cart_items', schema='core')
    op.drop_table('retrieval_logs', schema='rag')
    op.drop_index('uq_tokens_family_active', table_name='refresh_tokens', schema='ops', postgresql_where=sa.text('revoked_at IS NULL'))
    op.drop_index('ix_tokens_userid_expires', table_name='refresh_tokens', schema='ops')
    op.drop_table('refresh_tokens', schema='ops')
    op.drop_index('ux_variants_sku_live', table_name='product_variants', schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('product_variants', schema='core')
    op.drop_table('product_categories', schema='core')
    op.drop_table('carts', schema='core')
    op.drop_table('addresses', schema='core')
    op.drop_table('chat_messages', schema='chat')
    op.drop_table('agent_runs', schema='chat')
    op.drop_index('live_sessions_partial', table_name='auth_sessions', schema='ops', postgresql_where=sa.text('revoked_at IS NULL'))
    op.drop_index('ix_auth_sessions_userid_lastseen', table_name='auth_sessions', schema='ops')
    op.drop_table('auth_sessions', schema='ops')
    op.drop_index('ix_audit_logs_meta_gin', table_name='audit_logs', schema='ops', postgresql_using='gin')
    op.drop_index('ix_audit_logs_created_at', table_name='audit_logs', schema='ops')
    op.drop_table('audit_logs', schema='ops')
    op.drop_table('user_roles', schema='core')
    op.drop_index('ux_products_slug_live', table_name='products', schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('products', schema='core')
    op.drop_index('uq_password_resets_user_active', table_name='password_resets', schema='core', postgresql_where=sa.text('used_at IS NULL'))
    op.drop_table('password_resets', schema='core')
    op.drop_table('oauth_accounts', schema='core')
    op.drop_table('mfa_totp', schema='core')
    op.drop_table('customers', schema='core')
    op.drop_index('ix_api_keys_scopes_gin', table_name='api_keys', schema='core', postgresql_using='gin')
    op.drop_table('api_keys', schema='core')
    op.drop_table('chat_sessions', schema='chat')
    op.drop_table('knowledge_sources', schema='rag')
    op.drop_table('citations', schema='rag')
    op.drop_index('ix_login_attempts_ip_time', table_name='login_attempts', schema='ops')
    op.drop_index('ix_login_attempts_email_time', table_name='login_attempts', schema='ops')
    op.drop_table('login_attempts', schema='ops')
    op.drop_table('event_outbox', schema='ops')
    op.drop_table('tool_providers', schema='mcp')
    op.drop_table('users', schema='core')
    op.drop_table('roles', schema='core')
    op.drop_table('media_assets', schema='core')
    op.drop_table('inventory_locations', schema='core')
    op.drop_table('coupons', schema='core')
    op.drop_index('ux_categories_slug_live', table_name='categories', schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('categories', schema='core')
    op.drop_index('ux_brands_slug_live', table_name='brands', schema='core', postgresql_where=sa.text('deleted_at IS NULL'))
    op.drop_table('brands', schema='core')
    # ### end Alembic commands ###
