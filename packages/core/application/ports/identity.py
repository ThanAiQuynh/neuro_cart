from __future__ import annotations
from typing import Protocol, Optional, List
from uuid import UUID

from packages.infra.db.models.core.user import User
from packages.infra.db.models.core.role import Role
from packages.infra.db.models.core.customer import Customer
from packages.infra.db.models.core.address import Address


class IUserRepo(Protocol):
    async def search_by_email(self, email: str, *, with_deleted: bool = False) -> User: ...
    async def get(self, id: UUID, *, with_deleted: bool = False) -> User: ...
    async def add(self, obj: User, *, commit: bool = False, refresh: bool = True) -> User: ...
    async def update(self, obj: User, data: dict, *, commit: bool = False, refresh: bool = True) -> User: ...
    async def activate(self, user: User, *, commit: bool = False) -> User: ...
    async def deactivate(self, user: User, *, commit: bool = False) -> User: ...
    async def add_role(self, user: User, role_code: str, *, commit: bool = False) -> None: ...
    async def remove_role(self, user: User, role_code: str, *, commit: bool = False) -> None: ...


class IRoleRepo(Protocol):
    async def by_code(self, code: str) -> Role: ...
    async def ensure(self, code: str, name: Optional[str] = None, *, commit: bool = False) -> Role: ...


class ICustomerRepo(Protocol):
    async def by_user_id(self, user_id: UUID) -> Customer: ...
    async def ensure_for_user(self, user_id: UUID, tier: str = "standard", *, commit: bool = False) -> Customer: ...
    async def addresses(self, customer_id: UUID) -> List[Address]: ...


class IAddressRepo(Protocol):
    async def add(self, obj: Address, *, commit: bool = False, refresh: bool = True) -> Address: ...
    async def list_by_customer(self, customer_id: UUID) -> List[Address]: ...
    async def default_for_customer(self, customer_id: UUID) -> Optional[Address]: ...
    async def set_default(self, customer_id: UUID, address_id: UUID, *, commit: bool = False) -> None: ...
