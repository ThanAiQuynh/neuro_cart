from __future__ import annotations
from typing import Protocol, Optional, Dict, Any
from datetime import timedelta

class IAsyncPasswordHasher(Protocol):
    async def hash(self, plain: str) -> str: ...
    async def verify(self, plain: str, hashed: str) -> bool: ...

class IAsyncTokenService(Protocol):
    async def create_access_token(self, subject: str, *, expires_delta: Optional[timedelta] = None, extra: Optional[Dict[str, Any]] = None) -> str: ...
    async def create_refresh_token(self, subject: str, *, expires_delta: Optional[timedelta] = None, extra: Optional[Dict[str, Any]] = None) -> str: ...
    async def decode(self, token: str) -> dict: ...
